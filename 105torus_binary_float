#!/usr/bin/env python3

import sys

def main():
    operator, coefficients, precision = get_arguments()

    if operator == 1:
        bisection(coefficients, precision)
    if operator == 2:
        newton(coefficients, precision)
    if operator == 3:
        secant(coefficients, precision)

def compute_polynomial(x, coefficients):
    result = 0.0;
    rank = len(coefficients)
    for i in range(0, rank):
        result += float(coefficients[i]) * pow(x, i)
    return result;

def compute_derivative(coefficients):
    derivative = []
    for i in range(1, len(coefficients)):
        derivative.append(coefficients[i] * i)
    return derivative

def bisection(coefficients, precision):
    a = 0.0
    b = 1.0
    c = 0.5
    d = 0
    limit = pow(10.0, -precision)
    fc = limit + 1
    full_width = False
    while abs(fc) > limit:
        if d > 200:
            break
        c = (a + b) / 2.0
        fc = compute_polynomial(c, coefficients)
        fa = compute_polynomial(a, coefficients)

        if full_width or (len(str(c)) - 2) > precision:
            full_width = True
            print(f"x = {c:.{precision}f}")
        else:
            print(f"x = {c}")

        if fc * fa < 0:
            b = c
        else :
            a = c
        d += 1

def newton(coefficients, precision):
    a = 0.5
    limit = pow(10.0, -precision)
    derivative = compute_derivative(coefficients)
    fa = limit + 1
    full_width = False
    while abs(fa) > limit:
        if full_width or (len(str(a)) + 2) > precision:
            full_width = True
            print(f"x = {a:.{precision}f}")
        else:
            print(f"x = {a}")

        fa = compute_polynomial(a, coefficients)
        ffa = compute_polynomial(a, derivative)
        if ffa == 0:
            sys.stderr.write("Could not compute solution : function not convex.\n")
            sys.exit(84)
        a = a - (fa / ffa)

def secant(coefficients, precision):
    a = 0
    b = 1.0
    c = 0
    d = 0
    limit = pow(10.0, -precision)
    fc = limit + 1
    full_width = False
    while abs(fc) > limit:
        if d > 200:
            break
        fa = compute_polynomial(a, coefficients)
        fb = compute_polynomial(b, coefficients)
        c = a - (fa * (b - a)) / (fb - fa)
        fc = compute_polynomial(c, coefficients)
        d += 1

        if full_width or (len(str(c)) + 2) > precision:
            full_width = True
            print(f"x = {c:.{precision}f}")
        else:
            print(f"x = {c}")

        if fc * fa < 0:
            b = c
        else :
            a = c

def get_arguments():
    if len(sys.argv) > 1 and sys.argv[1] == "-h":
        help = open("help", "r")
        print(help.read())
        sys.exit(0)
    if len(sys.argv) != 8:
        sys.stderr.write("Invalid number of arguments. Try -h\n")
        sys.exit(84)

    try:
        operation = int(sys.argv[1])
    except ValueError:
        sys.stderr.write("Operation code must be an integer. Try -h\n")
        sys.exit(84)
    if not(operation in [1, 2, 3]):
        sys.stderr.write("Invalid operation code. Try -h\n")
        sys.exit(84)

    try:
        coefficients = list(map(float, sys.argv[2:7]))
    except ValueError:
        sys.stderr.write("Coefficients must be integers. Try -h \n")
        sys.exit(84)

    try:
        precision = int(sys.argv[7])
    except ValueError:
        sys.stderr.write("Precision must be an integer. Try -h \n")
        sys.exit(84)

    return [operation, coefficients, precision]

if __name__ == "__main__":
    main()
