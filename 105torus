#!/usr/bin/env python3

import sys
from decimal import *


def main():
    operator, coefficients, precision = get_arguments()

    if operator == 1:
        bisection(coefficients, precision)
    if operator == 2:
        newton(coefficients, precision)
    if operator == 3:
        secant(coefficients, precision)

def compute_polynomial(x, coefficients):
    result = coefficients[0];
    rank = len(coefficients)
    for i in range(1, rank):
        result += coefficients[i] * (x ** i)
    return result;

def compute_derivative(coefficients):
    derivative = []
    for i in range(1, len(coefficients)):
        derivative.append(coefficients[i] * i)
    return derivative

def bisection(coefficients, precision):
    a = Decimal(0)
    b = Decimal(1)
    c = Decimal(0.5)
    d = 0
    limit = Decimal(10.0) ** (-precision)
    fc = limit + 1
    while abs(fc) > limit:
        if d > 2000:
            break
        c = (a + b) / Decimal(2.0)
        fc = compute_polynomial(c, coefficients)
        fa = compute_polynomial(a, coefficients)
        if (len(str(c)) - 2 > precision):
            print(f"x = {round(c, precision)}")
        else:
            print(f"x = {c}")
        if fc * fa < 0:
            b = c
        else :
            a = c
        d += 1

def newton(coefficients, precision):
    a = Decimal(0.5)
    limit = Decimal(10.0) ** (-precision)
    derivative = compute_derivative(coefficients)
    fa = limit + 1
    d = 0
    while abs(fa) > limit:
        if d > 2000:
            break

        cstr = [str(round(a, precision))[d] for d in range(len(str(round(a, precision))))]
        for i in range(len(cstr) - 1, 0, -1):
            if cstr[i] == '0':
                cstr.pop()
            else:
                break
        if (len(str(a)) - 2 > precision):
            print("x = {}".format("".join(cstr)))
        else:
            print("x = {}".format("".join(cstr)))
            
        fa = compute_polynomial(a, coefficients)
        ffa = compute_polynomial(a, derivative)
        if ffa == 0:
            sys.stderr.write("Could not compute solution : function not convex.\n")
            sys.exit(84)
        a = a - (fa / ffa)
        d += 1

def secant(coefficients, precision):
    a = Decimal(0)
    b = Decimal(1.0)
    c = Decimal(0)
    d = 0
    limit = Decimal(10.0) ** (-precision)
    fc = limit + 1
    full_width = False
    while abs(fc) > limit:
        if d > 2000:
            break
        fa = compute_polynomial(a, coefficients)
        fb = compute_polynomial(b, coefficients)
        c = (a - (fa * ((b - a) / (fb - fa))))
        fc = compute_polynomial(c, coefficients)

        cstr = [str(round(c, precision))[d] for d in range(len(str(round(c, precision))))]
        for i in range(len(cstr) - 1, 0, -1):
            if cstr[i] == '0':
                cstr.pop()
            else:
                break
        if (len(str(c)) - 2 > precision):
            print("x = {}".format("".join(cstr)))
        else:
            print("x = {}".format("".join(cstr)))

        if fc * fa < 0:
            b = c
        else :
            a = c
        d += 1

def get_arguments():
    if len(sys.argv) > 1 and sys.argv[1] == "-h":
        help = open("help", "r")
        print(help.read())
        sys.exit(0)
    if len(sys.argv) != 8:
        sys.stderr.write("Invalid number of arguments. Try -h\n")
        sys.exit(84)

    try:
        operation = int(sys.argv[1])
    except ValueError:
        sys.stderr.write("Operation code must be an integer. Try -h\n")
        sys.exit(84)
    if not(operation in [1, 2, 3]):
        sys.stderr.write("Invalid operation code. Try -h\n")
        sys.exit(84)

    try:
        coefficients = list(map(Decimal, sys.argv[2:7]))
    except InvalidOperation:
        sys.stderr.write("Coefficients must be numbers. Try -h \n")
        sys.exit(84)

    try:
        precision = int(sys.argv[7])
    except ValueError:
        sys.stderr.write("Precision must be an integer. Try -h \n")
        sys.exit(84)

    getcontext().prec = precision + 10;

    return [operation, coefficients, precision]

if __name__ == "__main__":
    main()
